<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" Sdk="Microsoft.Net.Sdk" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<!-- Project custom -->
	<PropertyGroup>
		<TargetFramework>net6.0</TargetFramework>
		<AssemblyName>Sharp.Inject.Bootstrap.Native</AssemblyName>
		<OutputType>Library</OutputType>
	</PropertyGroup>
	
	<Target Name="MoveAndRename" AfterTargets="RustBuild">
		<ItemGroup>
			<RenameFile Include="target\$(Configuration)\sharp_inject_bootstrap_native.*" />    
		</ItemGroup>
		<Move SourceFiles="@(RenameFile)" DestinationFiles="@(RenameFile -&gt; Replace('sharp_inject_bootstrap_native', 'Sharp.Inject.Bootstrap.Native'))" />
	</Target>
	
	<!-- Rust general -->
	<PropertyGroup>
		<OutputPath>target\$(Configuration)\</OutputPath>
		<OutDir>target\$(Configuration)\</OutDir>
		<Configurations>Debug;Release</Configurations>
	</PropertyGroup>
	
	<ItemGroup>
		<!--Compile Include="**\*.rs" Exclude="target\**\*.rs" /-->
		<Content Include="**\*.rs" Exclude="target\**\*.rs" />
		<Content Include="Cargo.toml" />
		<Content Include="target\$(Configuration)\*.dll">
			<Pack>true</Pack>
			<PackageCopyToOutput>true</PackageCopyToOutput>
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<CopyToPublishDirectory>true</CopyToPublishDirectory>
		</Content>
		<!--Content Include="target\$(Configuration)\*.pdb">
			<Pack>true</Pack>
			<PackageCopyToOutput>true</PackageCopyToOutput>
			<CopyToOutputDirectory>true</CopyToOutputDirectory>
			<CopyToPublishDirectory>true</CopyToPublishDirectory>
		</Content-->
	</ItemGroup>
	
	<ItemGroup>
	  <Content Update="target\Debug\Sharp.Inject.Bootstrap.Native.dll">
	    <CopyToOutputDirectory>Always</CopyToOutputDirectory>
	  </Content>
	</ItemGroup>
	
	<Target Name="RustBuild" AfterTargets="Build" Inputs="@(Compile);cargo.toml;cargo.lock" Outputs="target\$(Configuration)\*.*">
		<Exec Command="cargo build" Condition=" '$(Configuration)' == 'Debug' " /> 
		<Exec Command="cargo build --release" Condition=" '$(Configuration)' == 'Release' " /> 
	</Target>
	
	<Target Name="RustClean" AfterTargets="Clean">
		<!--Exec Command="cargo clean" /--> 
	</Target>
	
	<Target Name="RustRun" AfterTargets="Run">
		<Exec Command="cargo run" /> 
	</Target>
	
	<Target Name="RustRebuild" AfterTargets="Rebuild" DependsOnTargets="RustClean;RustBuild" />
	
	<Target Name="Copy" AfterTargets="RustBuild">
		<Message Text="Test: $(OutDir)" Importance="high" />
		<Message Text="Test: $(OutDir)" Importance="high" />
		<Message Text="Test: $(OutDir)" Importance="high" />
		<Message Text="Test: $(OutDir)" Importance="high" />
		<Message Text="Test: $(OutDir)" Importance="high" />
		<Message Text="Test: $(OutDir)" Importance="high" />
		<Message Text="Test: $(OutDir)" Importance="high" />
		<Message Text="Test: $(OutDir)" Importance="high" />
		<Message Text="Test: $(OutDir)" Importance="high" />
		<Message Text="Test: $(OutDir)" Importance="high" />
		<Message Text="Test: $(OutDir)" Importance="high" />
		<Message Text="Test: $(OutDir)" Importance="high" />
		<Message Text="Test: $(OutDir)" Importance="high" />
		<Message Text="Test: $(OutDir)" Importance="high" />
		<Message Text="Test: @(OutputFiles)" Importance="high" />
		<Copy SourceFiles="@(OutputFiles)" DestinationFiles="@(OutputFiles->'$(OutputPath)%(RecursiveDir)%(Filename)%(Extension)')" />
			<!--SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
			OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
			Retries="$(CopyRetryCount)"
			RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
			UseHardlinksIfPossible="$(CreateHardLinksForCopyAdditionalFilesIfPossible)"
			UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyAdditionalFilesIfPossible)"-->
	</Target>
</Project>